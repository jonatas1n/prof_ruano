# Generated by Django 4.2 on 2024-10-01 23:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.contrib.routable_page.models
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("wagtailcore", "0093_uploadedfile"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="QuestionItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "question",
                    wagtail.fields.RichTextField(
                        max_length=255, verbose_name="Enunciado da questão"
                    ),
                ),
                (
                    "answers",
                    wagtail.fields.StreamField(
                        [
                            (
                                "option",
                                wagtail.blocks.StructBlock(
                                    [
                                        ("answer", wagtail.blocks.CharBlock()),
                                        (
                                            "is_correct",
                                            wagtail.blocks.BooleanBlock(
                                                default=False, required=False
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        blank=True,
                        null=True,
                        verbose_name="Alternativas",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="QuestionList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "duration",
                    models.IntegerField(default=120, verbose_name="Duração em minutos"),
                ),
                (
                    "instructions",
                    wagtail.fields.RichTextField(
                        blank=True, max_length=255, null=True, verbose_name="Instruções"
                    ),
                ),
            ],
            options={
                "verbose_name": "Lista de Questões",
                "verbose_name_plural": "Listas de Questões",
            },
        ),
        migrations.CreateModel(
            name="QuestionListIndex",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "default_instructions",
                    wagtail.fields.RichTextField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Instruções padrões para a realização dos testes",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                wagtail.contrib.routable_page.models.RoutablePageMixin,
                "wagtailcore.page",
            ),
        ),
        migrations.CreateModel(
            name="QuestionListSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_finished", models.BooleanField(default=False)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                ("answers", models.JSONField(blank=True, null=True)),
                ("result", models.JSONField(blank=True, null=True)),
                (
                    "question_list",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="questions.questionlist",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionItemSubject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="questions.questionitem",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="questionitem",
            name="question_list",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="questions.questionlist",
            ),
        ),
        migrations.AddField(
            model_name="questionitem",
            name="subjects",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="questions.QuestionItemSubject",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
    ]
